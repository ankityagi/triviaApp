from sqlalchemy import Column, Integer, String, DateTime, ForeignKey, Text, Boolean, Index
from sqlalchemy.orm import declarative_base
from datetime import datetime
from .database import Base


class User(Base):
    """
    User account information from Google OAuth authentication.
    Stores basic profile data for authenticated users who can play trivia games.
    """
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True, autoincrement=True)
    email = Column(String, index=True)  # Google account email (indexed for fast lookups)
    name = Column(String)               # Display name from Google profile
    picture = Column(String)            # Profile picture URL from Google

class TriviaLog(Base):
    """
    Historical log of completed trivia game sessions.
    Tracks when users played games, what topics they chose, and session details.
    Used for analytics and user statistics (not for question deduplication).
    """
    __tablename__ = "trivia_logs"
    id = Column(Integer, primary_key=True, index=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey("users.id"), index=True)  # Which user played
    topic = Column(String)                                         # Topic they selected
    rounds = Column(Integer)                                       # Total rounds in session
    created_at = Column(DateTime, default=datetime.utcnow)         # When session completed

class Question(Base):
    """
    Reusable trivia questions that can be served to multiple users.
    Questions are age-aware and deduplicated using content hashing.
    Generated by OpenAI or imported from previous game sessions.
    """
    __tablename__ = "questions"
    id = Column(Integer, primary_key=True, index=True, autoincrement=True)
    prompt = Column(Text)                                         # The trivia question text
    options = Column(Text)                                        # Multiple choice options (JSON as text)
    answer = Column(Text)                                         # Correct answer
    topic = Column(String)                                        # Subject category (history, science, etc.)
    min_age = Column(Integer)                                     # Minimum appropriate age
    max_age = Column(Integer)                                     # Maximum appropriate age  
    hash = Column(String, unique=True, index=True)               # Content hash for deduplication
    created_at = Column(DateTime, default=datetime.utcnow)       # When question was created/imported

class UserQuestion(Base):
    """
    Tracks which questions have been assigned to which users.
    Ensures no user ever sees the same question twice by maintaining
    a record of all question assignments per user. Supports atomic
    question assignment to prevent race conditions.
    """
    __tablename__ = "user_questions"
    id = Column(Integer, primary_key=True, index=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey("users.id"), index=True)      # Which user was assigned
    question_id = Column(Integer, ForeignKey("questions.id"), index=True)  # Which question was assigned
    assigned_at = Column(DateTime, default=datetime.utcnow)             # When assignment occurred
    seen = Column(Boolean, default=False)                              # Whether user has seen/answered it
    
    # Composite index for efficient user+question lookups
    __table_args__ = (
        Index('ix_user_question_composite', 'user_id', 'question_id'),
    )
